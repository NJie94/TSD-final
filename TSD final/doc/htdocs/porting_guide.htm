<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>CcDoc Porting Guide</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body bgcolor="#FFFFFF" text="#000000">
<h2 align="center"><font size="5"><a name="top"></a></font><font size="2"><a href="../index.html">ccdoc 
  home page</a></font><br>
  <font size="5">CcDoc Porting</font> Guide<br>
  <font size="2">Joe Linoff<br>
  $Revision: 1.2 $<br>
  $Date: 2003/02/26 18:45:35 $ </font></h2>
<hr>
<p>This document describes how to port ccdoc to a new platform.</p>
<p>The basic steps behind a port are</p>
<ol>
  <li>Download the source files (<a href="downloads/src.tar.gz">src.tar.gz</a>).</li>
  <li>Create two porting makefiles for debug and optimized targets of the form 
    mk<b>dbg</b>_&lt;compiler&gt;.mk and mk<b>opt</b>_&lt;compiler&gt; where the 
    if you are using a &lt;compiler&gt; is the name of your compiler. If you are 
    using the gcc compiler or any other compiler that is already supported, you 
    do not need to do this.</li>
  <li>Fix any problems in the source.</li>
  <li>Build and test by cd'ing into the src directory and typing 'make -f mkopt_&lt;compiler&gt; 
    all'. </li>
  <li>Ship the new executable (or the path to it) and description of the changes 
    to me, as described on the &quot;<a href="submit_port.htm">Submit a Port</a>&quot; 
    page.</li>
  <li>I will then add it to the downloads page.</li>
</ol>
<p>Before going into the details of how to create a porting makefile, some basic 
  information about the physical structure of ccdoc is presented. First, the <a href="#dir">directory 
  structure</a> is described and then the <a href="#targets">make targets</a> 
  are described. After that there is a discussion of how to create the <a href="#makefile">porting 
  makefile</a> and <a href="#building">build</a> the program.</p>
<a name="dir"></a>
<hr>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
  <tr> 
    <td> 
      <h3>Directory Structure</h3>
    </td>
    <td> 
      <div align="right"><a href="#top">^</a> <a href="#top">&lt;</a> <a href="#targets">&gt;</a></div>
    </td>
  </tr>
</table>
<p>The directory structure of ccdoc is shown below (this picture was generated 
  using ccdoc_v08/utils/dtree.pl):</p>
<blockquote> 
  <table width="75%" border="1" cellspacing="0" cellpadding="0">
    <tr> 
      <td> 
        <div align="center"><b>Figure 1. The ccdoc directory structure</b></div>
      </td>
    </tr>
    <tr> 
      <td> 
        <pre> ccdoc ---+---&gt; doc -----+---&gt; htdocs --------+---&gt; introduction <br>          |              |                    |                 <br>          |              |                    +---&gt; users_guide<br>          |              |                                      <br>          |              +---&gt; issues       <br>          |              |                  <br>          |              +---&gt; users_guide  <br>          |                                 <br>          +---&gt; src    <br>          |            <br>          +---&gt; test<br>          |                                 <br>          +---&gt; utils  <br>                       </pre>
      </td>
    </tr>
  </table>
  
</blockquote>
<p></p>
<p></p>
<p>As you can see, there are four top level directories: doc, src, test and utils. 
  The doc directory contains the documentation. The src directory contains the 
  source code and the make files. The test directory contains the test data and 
  the utils directory contains various utilities.</p>
<p>The release information is generated by the release target.</p>
<p>All of the porting and development work in ccdoc occurs in the src directory. 
  That is where all of the make targets are run.</p>
<p></p>
<a name="targets"></a>
<hr>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
  <tr> 
    <td> 
      <h3>Make Targets</h3>
    </td>
    <td>
      <div align="right"><a href="#top">^</a> <a href="#dir">&lt;</a> <a href="#makefile">&gt;</a></div>
    </td>
  </tr>
</table>
<p>In the source directory you can get additional information on make targets 
  by typing &quot;make&quot; or &quot;gmake&quot;. Here is the output:</p>
<blockquote> 
  <table width="75%" border="1" cellspacing="0" cellpadding="0">
    <tr> 
      <td> 
        <div align="center"><b>Figure 2. &quot;make help&quot;</b></div>
      </td>
    </tr>
    <tr> 
      <td> 
        <pre>CCDOC Makefile Help<br>  <br>Available targets:<br>  <br>    all      Build the program and run the tests.<br>  <br>    backup   Backup the source to a taz file.<br>  <br>    bld      Build the program only.<br>  <br>    clean    Clean up for a specific architecture.<br>  <br>    cleanall Clean up for all architectures.<br>  <br>    depend   Generate the include dependencies.<br>             in mkdepend.mk which is included by<br>             mktargs.mk.<br>  <br>    doc      Generate the ccdoc documentation.<br>  <br>    help     Help message.<br>  <br>    insert   Insert the help and copyright info into<br>             the source code.<br>  <br>    insert_help<br>             Insert the help info into the source code.<br>             from help.txt.<br>  <br>    insert_copyright<br>             Insert the copyright and license info into the<br>             source code from copyright.txt.<br>  <br>    release<br>    rel      Create the release in ../release directory<br>             and create the tar ball ../release/tarball.taz.<br>  <br>    test     Test the program (build if necessary).<br>  <br>Available makefile files:<br>  <br>    mkdbg_gcc.mk     Debug, GNU g++ compiler.<br>    mkopt_gcc.mk     Optimized, GNU g++ compiler.<br>    mkdbg_msvc.mk    Debug, MS Visual C++ compiler.<br>    mkopt_msvc.mk    Optimized, MS Visual C++ compiler.<br>    mkdbg_sun.mk     Debug, Solaris CC compiler.<br>    mkopt_sun.mk     Optimized, Solaris CC compiler.<br>  <br>Sample usages:<br>  <br>    % make -f mkopt_gcc.mk all<br>    % make -f mkopt_gcc.mk test<br>    % make -f mkopt_gcc.mk doc<br>  <br>Notes:<br>  <br>    To make a purify or quantify version of the program,<br>    set the LINK_PREFIX to the appropriate value as shown<br>    in the example below:<br>  <br>        % setenv LINK_PREFIX purify<br>        % make -f mkdbg_sun.mk all<br>  <br>    The Makefile file handles the vanilla targets. The<br>    mkdepend.mk file has the dependencies. The mktargs.mk<br>    file contains the complex targets.<br>  <br>    The other mk&lt;dbg&gt;_* and mk&lt;opt&gt;_* files define the<br>    personality of the compiler and the linker. They also<br>    where output (binary) directory.</pre>
        </td>
    </tr>
  </table>
  <p></p>
  <p></p>
</blockquote>
<a name="makefile"></a>
<hr>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
  <tr> 
    <td> 
      <h3>The Porting Makefile: mkopt_&lt;compiler&gt;.mk</h3>
    </td>
    <td> 
      <div align="right"><a href="#top">^</a> <a href="#targets">&lt;</a> <a href="#building">&gt;</a></div>
    </td>
  </tr>
</table>
<p>The porting makefile is a file with a mkopt or mkdbg prefix and a .mk suffix 
  that describes the platform dependent variables that the Makefile and mktargs.mk 
  files need to build the program. The name of the porting makefile that you create 
  should contain information about the compiler. The platform should be handled 
  automatically by utils/platform.pl. If it isn't you will need to update that 
  file. </p>
<p>The porting makefiles that I created for windows are:</p>
<ul>
  <li>mkopt_msvc.mk - Microsoft Visual C++ compiler, optimized mode.</li>
  <li>mkopt_gcc.mk - GNU G++ compiler, optimized mode.</li>
  <li>mkdbg_msvc.mk - Microsoft Visual C++ compiler, debug mode.</li>
  <li>mkdbg_gcc.mk - GNU G++ compiler, debug mode.</li>
</ul>
<p>Shown below are contents of the optimized platform makefiles for the Microsoft 
  Visual C++ compiler and the GNU G++ compiler.:</p>
<blockquote> 
  <table width="75%" border="1" cellspacing="0" cellpadding="0">
    <tr> 
      <td> 
        <div align="center"><b>Figure 3. mkopt_msvcc.mk</b></div>
      </td>
    </tr>
    <tr> 
      <td> 
        <pre># ================================================<br># MSVC compiler, optimized mode, windows platform.<br># ================================================<br>PERL = perl<br>PLATFORM = $(shell $(PERL) ../utils/platform.pl)<br>CCDOC_CID = bin_opt_msvc_${PLATFORM}<br>BIN_DIR = ../${CCDOC_CID}<br>OBJ_EXT = obj<br>CXX = cl<br>CXX_FLAGS = -Fd${BIN_DIR}/ccdoc.pdb -TP -nologo \
            -c -O2 -GX -DCCDOC_OPT -DCCDOC_CID=\&quot;${CCDOC_CID}\&quot;<br>CXX_OUT = -Fo<br>LINK_TARG = ${BIN_DIR}/ccdoc.exe<br>LINK = link<br>LINK_FLAGS = -nologo -incremental:no -stack:8000000 \
             -pdb:${BIN_DIR}/ccdoc.pdb<br>LINK_OUT = -out:<br>  <br>include mktargs.mk</pre>
      </td>
    </tr>
  </table>
  <p>&nbsp;</p>
  <table width="75%" border="1" cellspacing="0" cellpadding="0">
    <tr> 
      <td> 
        <div align="center"><b>Figure 4. mkopt_gcc.mk</b></div>
      </td>
    </tr>
    <tr> 
      <td> 
        <pre># ================================================<br># GCC compiler, optimized mode, any platform.<br># ================================================<br>PERL = perl<br>PLATFORM = $(shell $(PERL) ../utils/platform.pl)<br>CCDOC_CID = bin_opt_gcc_${PLATFORM}<br>BIN_DIR = ../${CCDOC_CID}<br>OBJ_EXT = o<br>CXX = g++<br>CXX_FLAGS = -c -w -O -DCCDOC_OPT -DCCDOC_CID=\&quot;${CCDOC_CID}\&quot;<br>CXX_OUT = -o <br>LINK_TARG = ${BIN_DIR}/ccdoc.exe<br>LINK = g++<br>LINK_FLAGS = -g<br>LINK_OUT = -o<br>  <br>include mktargs.mk</pre>
      </td>
    </tr>
  </table>
  
</blockquote>
<p>Here is a brief description of the variables that you need to change. The other 
  variables are derived from these.<br>
</p>
<blockquote> 
  <table width="90%" border="1" cellspacing="0" cellpadding="0">
    <tr> 
      <td colspan="2"> 
        <div align="center"><b>Table 1. Porting Make Variables</b></div>
      </td>
    </tr>
    <tr> 
      <td><b>Variable</b></td>
      <td><b>Description</b></td>
    </tr>
    <tr> 
      <td>CCDOC_CID</td>
      <td>The name of the binary directory. You need to change the <b>msvc</b> 
        string to your compiler string.</td>
    </tr>
    <tr> 
      <td>CXX</td>
      <td>The name of the C++ compiler.</td>
    </tr>
    <tr> 
      <td>CXX_FLAGS</td>
      <td>The compiler flags for debug or optimized mode.</td>
    </tr>
    <tr> 
      <td>CXX_OUT</td>
      <td>The flag used for describing the output file. For the MSVC compiler, 
        there should be no spaces after <b>-Fo</b>. For unix compilers there should 
        be a space after <b>-o</b>.</td>
    </tr>
    <tr> 
      <td>LINK</td>
      <td>The name of the linker. In most cases this will be the same as CXX.</td>
    </tr>
    <tr> 
      <td>LINK_FLAGS</td>
      <td>The linker flags for debug or optimized mode.</td>
    </tr>
    <tr> 
      <td>LINK_OUT</td>
      <td>The flag used for describing the output file. For the MSVC compiler, 
        there should be no spaces after <b>-out:</b>. For unix linkers there should 
        be a space after <b>-o</b>.</td>
    </tr>
    <tr> 
      <td>OBJ_EXT</td>
      <td>The object file extension. For unix this should be <b>o</b>.</td>
    </tr>
    <tr> 
      <td>PERL</td>
      <td>The name of the perl executable.</td>
    </tr>
  </table>
</blockquote>
<a name="building"></a>
<hr>
<table width="100%" border="0" cellspacing="0" cellpadding="0">
  <tr> 
    <td> 
      <h3>Building the Program</h3>
    </td>
    <td> 
      <div align="right"><a href="#top">^</a> <a href="#makefile">&lt;</a> <a href="#top">&gt;</a></div>
    </td>
  </tr>
</table>
<p>Once the porting makefile has been created, you attempt to build the program 
  using the <b>all</b> target. If the build fails, correct the source and try 
  again. If the build passes you have finished porting.</p>
<p>Here is a sample run for the mkopt_msvc.mk file:</p>
<blockquote> 
  <pre>% make -f mkopt_msvc.mk all</pre>
</blockquote>
<p>It is important to note here that you may have to strip out the line feeds 
  from the source code in order to get things to work properly. This is because 
  I develop ccdoc on a windows platform under the cygwin/gnu environment.<br>
</p>
<hr>
<div align="center"><font size="2">$Id: porting_guide.htm,v 1.2 2003/02/26 18:45:35 jlinoff Exp $</font> </div>
<p>&nbsp;</p>
<p>&nbsp; </p>
</body>
</html>
